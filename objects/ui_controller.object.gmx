<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw UI based upon room type

if(room == rm_menu_main) {
    draw_set_halign(fa_center)
    draw_set_valign(fa_middle)
    draw_set_font(fnt_title)
    draw_set_color(c_white)
    draw_text(room_width / 2, room_height / 2, "Saizo")
    draw_set_font(fnt_UI)
    draw_text(room_width / 2, room_height /2 + 60, "Press any key to begin.")
}
else if(game_controller.level_state_current == game_controller.level_states[? "arena"]) {
    // Draw score and health bars in arena mode
    draw_set_halign(fa_center)
    draw_set_valign(fa_middle)
    draw_set_font(fnt_UI)
    draw_text(view_xview + room_width / 2, view_yview + 20, "Score")
    draw_text(view_xview + room_width / 2, view_yview + 60, string(game_controller.score_left) + " : " + string(game_controller.score_right))
    // fighter_left health bar
    bar_x = view_xview + 20
    bar_y = view_xview + 40
    bar_outline_length = room_width / 2 - 80
    bar_length = bar_outline_length * (game_controller.fighter_left.char_health / game_controller.fighter_left.char_health_max)
    bar_height = 40
    draw_text(bar_x + bar_outline_length / 2, view_yview + 20, game_controller.fighter_left_name + " Health")
    draw_set_color(c_green)
    draw_rectangle(bar_x, bar_y, bar_x + bar_length, bar_y + bar_height, false)
    draw_set_color(c_white)
    draw_rectangle(bar_x, bar_y, bar_x + bar_outline_length, bar_y + 40, true)
    // fighter_right health bar
    bar_x = (room_width / 2) + view_xview + 60
    bar_y = view_xview + 40
    bar_outline_length = room_width / 2 - 80
    bar_length = bar_outline_length * (game_controller.fighter_right.char_health / game_controller.fighter_right.char_health_max)
    bar_height = 40
    draw_text(bar_x + bar_outline_length / 2, view_yview + 20, game_controller.fighter_right_name + " Health")
    draw_set_color(c_green)
    draw_rectangle(bar_x, bar_y, bar_x + bar_length, bar_y + bar_height, false)
    draw_set_color(c_white)
    draw_rectangle(bar_x, bar_y, bar_x + bar_outline_length, bar_y + 40, true)
}
else if (game_controller.level_state_current == game_controller.level_states[? "intermediate"]) {
    
}
else if (room == rm_end) {
    draw_set_halign(fa_center)
    draw_set_valign(fa_middle)
    draw_set_font(fnt_title)
    draw_text(room_width / 2, room_height / 2, "Game Over")
    draw_set_font(fnt_UI)
    draw_text(room_width / 2, room_height /2 + 60, "Press any key to return to menu.")
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
